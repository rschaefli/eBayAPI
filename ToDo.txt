- How to structure the data in Elasticsearch?
    - Results for different queries need to be organized somehow
    - Append the query used to get the result to the object we are indexing
    - We could use "type" when performing the index on the ES side.
      - Is this an appropriate way to use type? It would be a simple way to split up an individual users queries...
- Handle pagination on eBay result page
- Implement time range search, so we only get results since our last cron search + some buffer period so no listings fall through the cracks
    - Build this with an option to search ALL or within the last X hours
- Do we want to use Elasticsearch as persistent storage, then bring up another instance to act as the searchable index?
- We will need a persistent data store for
    - User account info
    - Queries that users create
    - Management of eBay queries
    - Turning cron jobs on and off...should each query cron be running in it's own docker container?
        - This would mean the app is pretty dumb, it just dumps results to ES
        - We would need another display and interaction app which does all the UI and user interactions....but that makes sense
        - The UI app will also have to manage the running cron containers
- Build a UI front-end to the app
    - Expose a web port in docker-compose.yml
    - Query the contents of the Elasticsearch index


NOTES
- Queries should query based on time if possible (does the eBay API support searching within a time range?), querying for listing in the range of now and when the LAST query was completed
    - Can use the cron interval to determine to search only X minutes/hours/whatever since the last query
- Think about other ways to search eBay that might be useful
- eBay limits the number of results that can be retrieved from any search to 10,000
    - By limiting max results per page to 100 and max page to 100






console.dir(result.paginationOutput[0].pageNumber);
console.dir(result.paginationOutput[0].entriesPerPage);
console.dir(result.paginationOutput[0].totalPages);
console.dir(result.paginationOutput[0].totalEntries);
